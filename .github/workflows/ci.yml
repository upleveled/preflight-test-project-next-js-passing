name: CI
on: push

jobs:
  ci:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    timeout-minutes: 15
    env:
      PGHOST: localhost
      PGDATABASE: preflight_test_project_next_js_passing
      PGUSERNAME: preflight_test_project_next_js_passing
      PGPASSWORD: preflight_test_project_next_js_passing
    steps:
      - name: Add PostgreSQL binaries to PATH
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            echo "$(pg_config --bindir)" >> $GITHUB_PATH
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "$PGBIN" >> $GITHUB_PATH
          fi
      - name: Start preinstalled PostgreSQL
        shell: bash
        run: |
          export PGHOST="${RUNNER_TEMP//\\//}/postgres"
          export PGDATA="$PGHOST/pgdata"
          mkdir --parents "$PGDATA"

          # initdb requires file for password in non-interactive mode
          export PWFILE="$RUNNER_TEMP/pwfile"
          echo 'postgres' > $PWFILE

          initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"
          echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
          pg_ctl start
          # sudo systemctl start postgresql.service
          echo "checking if ready..."
          pg_isready --username="postgres" --dbname="postgres"
          echo "creating user..."
          psql --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"
          # psql --host "$PGHOST" --command="GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO $PGUSERNAME" --command="\l"
          echo "creating database..."
          createdb --owner="$PGUSERNAME" --username="postgres" "$PGDATABASE"
      # - name: Create database user
      #   run: |
      #     sudo -u postgres psql --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"
      # - name: Create database and allow user
      #   run: |
      #     sudo -u postgres createdb --owner=$PGUSERNAME $PGDATABASE

      # Avoid CRLF in Windows tests, which cause problems with Prettier:
      # https://github.com/upleveled/preflight/runs/1824397400
      #
      # Suggested here: https://github.com/actions/checkout/issues/250#issuecomment-635267458
      # Example repo: https://github.com/ghdl/ghdl/blob/aa63b5efcd2be66acc26443032df2b251e4b1a7a/.github/workflows/Test.yml#L230-L232
      - name: Use LF instead of CRLF for clone
        run: git config --global core.autocrlf input

      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: '9.0.0-beta.2'

      # Use the official setup-node action (sets up Node.js):
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install
      - run: pnpm migrate up
      # Also generates next-env.d.ts, required for tsc
      - name: Build Next.js app
        run: pnpm build
      - name: Run TypeScript Compiler
        run: pnpm tsc
      - name: Run ESLint
        run: pnpm eslint . --max-warnings 0
      - name: Run Stylelint
        run: pnpm stylelint '**/*.{css,scss,less,js,tsx}'
      - name: Install and run Preflight
        run: |
          pnpm add --global @upleveled/preflight
          preflight
